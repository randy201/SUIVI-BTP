// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using temp_back.Connexion;

#nullable disable

namespace temp_back.Data.Migrations
{
    [DbContext(typeof(App_Db_Context))]
    [Migration("20240513052834_M-1")]
    partial class M1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("temp_back.Models.All_type", b =>
                {
                    b.Property<int>("Id_all_type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_all_type"));

                    b.Property<DateOnly>("DateOnly_value")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("DateTime_value")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Double_value")
                        .HasPrecision(30, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("File_path")
                        .HasColumnType("text");

                    b.Property<int>("Int_value")
                        .HasColumnType("integer");

                    b.Property<string>("String_value")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("TimeOnly_value")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id_all_type");

                    b.ToTable("all_types");
                });

            modelBuilder.Entity("temp_back.Models.Profil", b =>
                {
                    b.Property<int>("Id_profil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_profil"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Statut")
                        .HasColumnType("integer");

                    b.HasKey("Id_profil");

                    b.ToTable("profils");
                });

            modelBuilder.Entity("temp_back.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id_utilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_utilisateur"));

                    b.Property<string>("Email")
                        .HasColumnType("text unique");

                    b.Property<string>("Mot_de_passe")
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .HasColumnType("text");

                    b.Property<int>("ProfilId_profil")
                        .HasColumnType("integer");

                    b.Property<int>("Statut")
                        .HasColumnType("integer");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text unique");

                    b.HasKey("Id_utilisateur");

                    b.HasIndex("ProfilId_profil");

                    b.ToTable("utilisateurs");
                });

            modelBuilder.Entity("temp_back.Models.Utilisateur", b =>
                {
                    b.HasOne("temp_back.Models.Profil", "Profil")
                        .WithMany()
                        .HasForeignKey("ProfilId_profil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profil");
                });
#pragma warning restore 612, 618
        }
    }
}
